<Container>
  <Name>Typesense-Dashboard</Name>
  <Repository>ghcr.io/bfritscher/typesense-dashboard:latest</Repository>
  <Registry>https://github.com/bfritscher/typesense-dashboard/pkgs/container/typesense-dashboard</Registry>
  <Network>bridge</Network>
  <MyIP/>
  <Shell>/bin/sh</Shell>
  <Privileged>false</Privileged>

  <Support>https://forums.unraid.net/topic/193903-support-eurotimmy-typesense-typesense-dashboard/</Support>
  <Project>https://github.com/bfritscher/typesense-dashboard</Project>
  <Overview>
A lightweight, feature-rich web dashboard for managing and browsing your Typesense collections.

• Default WebUI: http://IP:PORT/  
• Optional auto-login: mount a JSON file to /srv/config.json (contains your Typesense host/port/protocol and API key).  
• If serving behind a sub-path, set PUBLIC_PATH (e.g. "/dashboard").  
• If your Typesense server is on a different origin, ensure it’s started with CORS enabled.

Note: If you want auto-login functionality, create the file config.json in your Unraid server first (typically at: /mnt/user/appdata/typesense-dashboard/config.json).
  </Overview>
  <Category>Productivity: Tools</Category>
  <WebUI>http://[IP]:[PORT:80]/</WebUI>
<Icon>https://github.com/Eurotimmy/unraid-templates/blob/main/Typesense-Dashboard/typesense-dashboard.png</Icon>
<TemplateURL>https://raw.githubusercontent.com/Eurotimmy/unraid-templates/master/Typesense-Dashboard/typesense-dashboard.xml</TemplateURL>
  <ExtraParams/>
  <PostArgs/>

  <!-- Port: host 8080 -> container 80 -->
  <Config Name="WebUI Port" Target="80" Default="8080" Mode="tcp" Description="Container listens on 80. Change host port if 8080 is in use." Type="Port" Display="always" Required="true" Mask="false"/>

  <!-- Optional: prefill connection + API key for auto-login (bind a single FILE) -->
  <Config Name="Auto-login config (optional)" Target="/srv/config.json" Default="/mnt/user/appdata/typesense-dashboard/config.json" Mode="rw" Description="Bind a file that exists on the host. IMPORTANT: create it first or Docker will make a folder." Type="Path" Display="always" Required="false" Mask="false"/>

  <!-- Optional: serve UI from a sub-path, e.g. /dashboard -->
  <Config Name="PUBLIC_PATH" Target="PUBLIC_PATH" Default="/" Mode="" Description="Set to a sub-path (must start with '/') if you’re serving behind a reverse-proxy subfolder." Type="Variable" Display="advanced" Required="false" Mask="false"/>
</Container>
